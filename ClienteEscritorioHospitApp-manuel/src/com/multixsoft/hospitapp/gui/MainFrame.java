/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.multixsoft.hospitapp.gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.multixsoft.hospitapp.connector.ConectorDoctorManager;
import com.multixsoft.hospitapp.connector.ConectorServicio;
import com.multixsoft.hospitapp.entities.Doctor;
import com.multixsoft.hospitapp.entities.Schedule;
import com.multixsoft.hospitapp.utilities.FixedSizeAlphaNumericDocument;
import com.multixsoft.hospitapp.utilities.FixedSizeAlphabeticalDocument;
import com.multixsoft.hospitapp.utilities.Validator;
import java.awt.Color;
import javax.swing.JInternalFrame;

/**
 *
 * @author manuelmartinez
 */
public class MainFrame extends javax.swing.JFrame {

    private Doctor selectedDoctor;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        //this is to make the window the maximum size
//        GraphicsConfiguration gc = getGraphicsConfiguration();
//        Rectangle screenRect = gc.getBounds();
//         System.out.println("Screen size: " + screenRect);
//
//        Toolkit tk = Toolkit.getDefaultToolkit();
//        Insets desktopInsets = tk.getScreenInsets(gc);
//         System.out.println("OS Insets: " + desktopInsets);
//
//        Insets frameInsets = getInsets();     // only works after a pack() call
//         System.out.println("JFrame Insets: " + frameInsets);
//
//        Dimension tfDim = this.getPreferredSize();   // size of text field
//         System.out.println("Box TF Size: " + tfDim );
//         System.out.println("Time TF Size: " + this.getPreferredSize() );  
//
//        int pWidth = screenRect.width - (desktopInsets.left + desktopInsets.right)
//                - (frameInsets.left + frameInsets.right);
//
//        int pHeight = screenRect.height - (desktopInsets.top + desktopInsets.bottom)
//                - (frameInsets.top + frameInsets.bottom)
//                ;
//        System.out.println("dimensions width="+pWidth+" hieght="+pHeight);
////        this.setPreferredSize(new Dimension(pWidth, pHeight));
//        this.setSize(pWidth, pHeight);
        //center the frame in the center of the screen
        Toolkit aKit = this.getToolkit();
        Dimension windowSize = aKit.getScreenSize();
        this.setBounds((windowSize.width / 2) - (this.getWidth() / 2),
                (windowSize.height / 2) - (this.getHeight() / 2),
                this.getWidth(), this.getHeight());

        //poner la imagen al destop pane
        jDesktopPanePacientes.setBorder(new BorderBackImage());

        jTextFieldNombre.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldNombre, 64));
        jTextFieldApellidos.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldApellidos, 100));
        jTextFieldLicencia.setDocument(new FixedSizeAlphaNumericDocument(jTextFieldLicencia, 90));
        jTextFieldEspecialidad.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldEspecialidad, 100));

        jTextFieldUsername.setDocument(new FixedSizeAlphaNumericDocument(jTextFieldUsername, 80));
        jPasswordField1.setDocument(new FixedSizeAlphaNumericDocument(jPasswordField1, 64));

        jButtonEliminar.setEnabled(false);
        jButtonAddHorario.setEnabled(false);
        jButtonModificar.setEnabled(false);

        actualizarListDoctores();

        this.setResizable(false);
    }

    private void actualizarListDoctores() {
        //Lista de doctores
        ConectorServicio servidor = ConectorServicio.getInstance();
        jListDoctores.addListSelectionListener(new ManejadorListaDoctores());
        List<Doctor> doctores = servidor.obtenerListaDoctor();
        DefaultListModel modelo = new DefaultListModel();
        for (Doctor c : doctores) {
            modelo.addElement(c);
        }
        jListDoctores.setModel(modelo);
    }

    private void limpiar() {
//        jButtonEliminar.setEnabled(false);
        jButtonAddHorario.setEnabled(false);
//        jButtonModificar.setEnabled(false);
        jTextFieldNombre.setText("");
        jTextFieldApellidos.setText("");
        jTextFieldEspecialidad.setText("");
        jTextFieldLicencia.setText("");
        jTextFieldUsername.setText("");
        jPasswordField1.setText("");
        jLabelError.setText(" ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPassword = new javax.swing.JTextField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldApellidos = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldLicencia = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldEspecialidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDoctores = new javax.swing.JList();
        jButtonAgregar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonAddHorario = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();
        jPanelPacientes = new javax.swing.JPanel();
        jToolBarPacientes = new javax.swing.JToolBar();
        jButtonVerPaciente = new javax.swing.JButton();
        jButtonCancelarCita = new javax.swing.JButton();
        jButtonAsignarPaciente = new javax.swing.JButton();
        jDesktopPanePacientes = new javax.swing.JDesktopPane();

        jPasswordField2.setText("jPasswordField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellido:");

        jLabel3.setText("Username:");

        jLabel4.setText("Licencia:");

        jLabel5.setText("Especialidad:");

        jLabel6.setText("Password:");

        jScrollPane1.setViewportView(jListDoctores);

        jButtonAgregar.setText("Crear Médico");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonModificar.setText("Actualizar Médico");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar Médico");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonAddHorario.setText("Ver Horario");
        jButtonAddHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddHorarioActionPerformed(evt);
            }
        });

        jButton1.setText("Limpiar Campos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelError.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAddHorario, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(jTextFieldLicencia))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(6, 6, 6)
                                .addComponent(jTextFieldEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelError, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelError)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButtonAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonModificar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAddHorario)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Médicos", jPanel1);

        jToolBarPacientes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBarPacientes.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBarPacientes.setRollover(true);

        jButtonVerPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/icon-people.png"))); // NOI18N
        jButtonVerPaciente.setText("   Ver Pacientes   ");
        jButtonVerPaciente.setFocusable(false);
        jButtonVerPaciente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonVerPaciente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonVerPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerPacienteActionPerformed(evt);
            }
        });
        jToolBarPacientes.add(jButtonVerPaciente);

        jButtonCancelarCita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/icon-write.png"))); // NOI18N
        jButtonCancelarCita.setText("       Ver Citas       ");
        jButtonCancelarCita.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCancelarCita.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCancelarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarCitaActionPerformed(evt);
            }
        });
        jToolBarPacientes.add(jButtonCancelarCita);

        jButtonAsignarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/icon-people4.png"))); // NOI18N
        jButtonAsignarPaciente.setText("Asignar Paciente");
        jButtonAsignarPaciente.setFocusable(false);
        jButtonAsignarPaciente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAsignarPaciente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAsignarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAsignarPacienteActionPerformed(evt);
            }
        });
        jToolBarPacientes.add(jButtonAsignarPaciente);

        javax.swing.GroupLayout jPanelPacientesLayout = new javax.swing.GroupLayout(jPanelPacientes);
        jPanelPacientes.setLayout(jPanelPacientesLayout);
        jPanelPacientesLayout.setHorizontalGroup(
            jPanelPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBarPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPanePacientes))
        );
        jPanelPacientesLayout.setVerticalGroup(
            jPanelPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPanePacientes)
            .addComponent(jToolBarPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Pacientes", jPanelPacientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        String username = jTextFieldUsername.getText();
        String password = new String(jPasswordField1.getPassword());
        String firstName = jTextFieldNombre.getText();
        String lastName = jTextFieldApellidos.getText();
        String license = jTextFieldLicencia.getText();
        String specialty = jTextFieldEspecialidad.getText();

        if (username != null
                && firstName != null
                && lastName != null
                && license != null
                && specialty != null) {

            if (!username.isEmpty()
                    && !firstName.isEmpty()
                    && !lastName.isEmpty()
                    && !license.isEmpty()
                    && !specialty.isEmpty()) {

                if (password.isEmpty()) {
                    password = selectedDoctor.getPassword();
                }

                Doctor doctor = new Doctor(selectedDoctor.getUsername(), password, firstName, lastName, license);
                doctor.setSpecialty(specialty);

                ConectorServicio conectorServicio = ConectorServicio.getInstance();
                conectorServicio.updateDoctor(doctor);
                //TODO
                actualizarListDoctores();

                limpiar();
            } else {
                jLabelError.setText("* Todo Campo debe de tener un dato");
                jLabelError.setForeground(Color.red);
            }
        } else {
            jLabelError.setText("* Todo Campo debe de tener un dato!!");
            jLabelError.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        String username = jTextFieldUsername.getText();
        String password = new String(jPasswordField1.getPassword());
        String firstName = jTextFieldNombre.getText();
        String lastName = jTextFieldApellidos.getText();
        String license = jTextFieldLicencia.getText();
        String specialty = jTextFieldEspecialidad.getText();

        if (username != null
                && firstName != null
                && lastName != null
                && license != null
                && specialty != null) {

            if (!username.isEmpty()
                    && !firstName.isEmpty()
                    && !lastName.isEmpty()
                    && !license.isEmpty()
                    && !specialty.isEmpty()
                    && !password.isEmpty()) {

                if (existeUsername(username)) {
                    errorPane("El Nombre de Usuario no está disponible: " + username);
                    return;
                }
                Validator val = Validator.getInstance();
                        
//                if(!val.isValidNss(nss)){
//                    jLabelError.setText("El NSS debe tener 11 digitos, puede llevar un solo guión pero no el principio ni fin.");
//                    jLabelError.setForeground(Color.red);
//                    return;
//                }
                
                if(!val.isValidFirstName(firstName)){
                    jLabelError.setText("El nombre debe ser de más de 3 caracteres y empezar con una mayúscula.");
                    jLabelError.setForeground(Color.red);
                    return;
                }
                
                if(!val.isValidLastName(lastName)){
                    jLabelError.setText("El apellido debe ser de más de 3 caracteres.");
                    jLabelError.setForeground(Color.red);
                    return;
                }

//                if (!esValidoElEmail(address)) {
//                    jLabelErrorMsg.setText("El Email debe de tener solamente un @, y no puede estar al final.");
//                    jLabelErrorMsg.setForeground(Color.red);
//                    return;
//                }
                
//                if(!val.isValidEmail(address)){
//                    jLabelError.setText("El Email debe de tener solamente un @, y no puede estar en el principio o al final.");
//                    jLabelError.setForeground(Color.red);
//                    return;
//                }
                
                if(!val.isValidPassword(password)){
                    jLabelError.setText("La contraseña debe llevar al menos una mayúscula, un número y debe tener mínimo 8 caracteres.");
                    jLabelError.setForeground(Color.red);
                    return;
                }

//                if (contieneCharacteresInvalidos(username)) {
//                    jLabelErrorEmptyField.setText("#\\?! El username contiene caracteres inválidos.");
//                    jLabelErrorEmptyField.setForeground(Color.red);
//                    return;
//                }

                Doctor doctor = new Doctor(username, password, firstName, lastName, license);
                doctor.setSpecialty(specialty);

                ConectorDoctorManager conectorDoctor = ConectorDoctorManager.getInstance();
                String saveNewDoctor = conectorDoctor.saveNewDoctor(doctor);
                actualizarListDoctores();

                if (saveNewDoctor != null) {
                    msgPane("Se creó el Médico con éxito.");

                    //asignarle un schedule vacio al doctor nuevo
                    long id = (long) (Math.random() * 100000);
                    Schedule sch = new Schedule(id);
                    sch.setDoctorUsername(doctor);
                    sch.setMonday(" ");
                    sch.setTuesday(" ");
                    sch.setWednesday(" ");
                    sch.setThursday(" ");
                    sch.setFriday(" ");

                    ConectorDoctorManager dm = ConectorDoctorManager.getInstance();
                    String setSchedule = dm.setSchedule(sch);
                    if (setSchedule != null) {
                        msgPane("Se le asigno un Horario vacío al Médico.");
                    } else {
                        errorPane("No se le pudo asignar un Horario al Médico.");
                    }
                    limpiar();
                } else {
                    errorPane("El Médico no se pudo crear...");

                }
            } else {
                jLabelError.setText("* Todo Campo debe de tener un dato");
                jLabelError.setForeground(Color.red);
            }
        } else {
            jLabelError.setText("* Todo Campo debe de tener un dato!!");
            jLabelError.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        DefaultListModel modelo = (DefaultListModel) jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor cSel = (Doctor) modelo.getElementAt(indice);
            ConectorServicio servidor = ConectorServicio.getInstance();
            servidor.eliminarDoctor(cSel.getUsername());

            modelo.remove(indice);
            actualizarListDoctores();

            limpiar();
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonAddHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddHorarioActionPerformed
        ListModel modelo = jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor doc = (Doctor) modelo.getElementAt(indice);
            HorariosJFrame horarios = new HorariosJFrame(doc);
            horarios.setVisible(true);
        }
    }//GEN-LAST:event_jButtonAddHorarioActionPerformed

    private void jButtonVerPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerPacienteActionPerformed
        JInternalFrame[] allFrames = jDesktopPanePacientes.getAllFrames();
        for (int i = 0; i < allFrames.length; i++) {
            JInternalFrame allFrame = allFrames[i];
            String name = allFrame.getName();
            if (name.equalsIgnoreCase("verpaciente")) {
                return;
            }
        }
        VerPacientesJInternalFrame verPatientFrame
                = new VerPacientesJInternalFrame();
        verPatientFrame.setName("verpaciente");
        verPatientFrame.setVisible(true);
        jDesktopPanePacientes.add(verPatientFrame);
        verPatientFrame.requestFocusInWindow();
        verPatientFrame.moveToFront();

    }//GEN-LAST:event_jButtonVerPacienteActionPerformed

    private void jButtonCancelarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarCitaActionPerformed
        JInternalFrame[] allFrames = jDesktopPanePacientes.getAllFrames();
        for (int i = 0; i < allFrames.length; i++) {
            JInternalFrame allFrame = allFrames[i];
            String name = allFrame.getName();
            if (name.equalsIgnoreCase("cancelcita")) {
                return;
            }
        }
        
        JInternalFrameCancelarCita cancelCitaFrame = new JInternalFrameCancelarCita();
        cancelCitaFrame.setName("cancelcita");
        cancelCitaFrame.setVisible(true);
        jDesktopPanePacientes.add(cancelCitaFrame);
        cancelCitaFrame.requestFocusInWindow();
        cancelCitaFrame.moveToFront();
    }//GEN-LAST:event_jButtonCancelarCitaActionPerformed

    private void jButtonAsignarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAsignarPacienteActionPerformed
        JInternalFrame[] allFrames = jDesktopPanePacientes.getAllFrames();
        for (int i = 0; i < allFrames.length; i++) {
            JInternalFrame allFrame = allFrames[i];
            String name = allFrame.getName();
            if (name.equalsIgnoreCase("assignar")) {
                return;
            }
        }
        
        AsignarPacienteJInternalFrame asignar
                = new AsignarPacienteJInternalFrame();
        asignar.setName("assignar");
        asignar.setVisible(true);
        jDesktopPanePacientes.add(asignar);
        asignar.requestFocusInWindow();
        
        asignar.moveToFront();
    }//GEN-LAST:event_jButtonAsignarPacienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpiar();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void errorPane(String s) {
        JOptionPane.showMessageDialog(null, s, "Error Message", JOptionPane.ERROR_MESSAGE);
    }

    public void msgPane(String s) {
        JOptionPane.showMessageDialog(null, s, "Error Message", JOptionPane.INFORMATION_MESSAGE);
    }

    private class ManejadorListaDoctores implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting() == false) {
                int indice = jListDoctores.getSelectedIndex();
                if (indice == -1) {
//                    jButtonEliminar.setEnabled(false);
                    jButtonAddHorario.setEnabled(false);
//                    jButtonModificar.setEnabled(false);
                } else {
//                    jButtonEliminar.setEnabled(true);
                    jButtonAddHorario.setEnabled(true);
//                    jButtonModificar.setEnabled(true);

                    ListModel modelo = jListDoctores.getModel();
                    Doctor cSel = (Doctor) modelo.getElementAt(indice);

                    selectedDoctor = cSel;

                    jTextFieldNombre.setText(cSel.getFirstName());
                    jTextFieldApellidos.setText(cSel.getLastName());
                    jTextFieldEspecialidad.setText(cSel.getSpecialty());
                    jTextFieldLicencia.setText(cSel.getLicense());
                    jTextFieldUsername.setText(cSel.getUsername());
                    jPasswordField1.setText("");
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private boolean existeUsername(String un) {
        ListModel modelo = jListDoctores.getModel();
        for (int i = 0; i < modelo.getSize(); i++) {
            Doctor d = (Doctor) modelo.getElementAt(i);
            if (d.getUsername().equalsIgnoreCase(un)) {
                return true;
            }
        }
        return false;
    }

    private boolean contieneCharacteresInvalidos(String s) {
        char c;
        for (int i = 0; i < s.length(); i++) {
            c = s.charAt(i);
            if (c == '?' || c == '\\' || c == '#' || c == '%') {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddHorario;
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonAsignarPaciente;
    private javax.swing.JButton jButtonCancelarCita;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonVerPaciente;
    private javax.swing.JDesktopPane jDesktopPanePacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JList jListDoctores;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelPacientes;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextFieldApellidos;
    private javax.swing.JTextField jTextFieldEspecialidad;
    private javax.swing.JTextField jTextFieldLicencia;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JToolBar jToolBarPacientes;
    // End of variables declaration//GEN-END:variables
}
