/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.multixsoft.hospitapp.gui;

import com.multixsoft.hospitapp.connector.ConectorDoctorManager;
import com.multixsoft.hospitapp.connector.ConectorPrivacyControl;
import com.multixsoft.hospitapp.connector.ConectorServicio;
import com.multixsoft.hospitapp.entities.Doctor;
import com.multixsoft.hospitapp.entities.Schedule;
import com.multixsoft.hospitapp.utilities.FixedSizeAlphaNumericDocument;
import com.multixsoft.hospitapp.utilities.FixedSizeAlphabeticalDocument;
import com.multixsoft.hospitapp.utilities.JPanes;
import com.multixsoft.hospitapp.utilities.Validator;
import java.awt.Color;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author manuelmartinez
 */
public class JIF_Doctores extends javax.swing.JInternalFrame {

    private Doctor selectedDoctor;
    private JDesktopPane desk;

    /**
     * Creates new form JIF_Doctores
     */
    public JIF_Doctores(JDesktopPane desk) {
        initComponents();

        this.desk = desk;

        jTextFieldNombre.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldNombre, 64));
        jTextFieldApellidos.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldApellidos, 100));
        jTextFieldLicencia.setDocument(new FixedSizeAlphaNumericDocument(jTextFieldLicencia, 90));
        jTextFieldEspecialidad.setDocument(new FixedSizeAlphabeticalDocument(jTextFieldEspecialidad, 100));

        jTextFieldUsername.setDocument(new FixedSizeAlphaNumericDocument(jTextFieldUsername, 80));
        jPasswordField1.setDocument(new FixedSizeAlphaNumericDocument(jPasswordField1, 64));

        limpiar();

        actualizarListDoctores();
    }

    private void actualizarListDoctores() {
        //Lista de doctores
        ConectorServicio servidor = ConectorServicio.getInstance();
        jListDoctores.addListSelectionListener(new ManejadorListaDoctores());
        List<Doctor> doctores = servidor.obtenerListaDoctor();
        DefaultListModel modelo = new DefaultListModel();
        for (Doctor c : doctores) {
            modelo.addElement(c);
        }
        jListDoctores.setModel(modelo);
    }

    private void limpiar() {
        jButtonEliminar.setEnabled(false);
        jButtonVerHorario.setEnabled(false);
        jButtonActualizar.setEnabled(false);
        jButtonVerCitas.setEnabled(false);
        jButtonCitasProgramadas.setEnabled(false);

        jTextFieldNombre.setText("");
        jTextFieldApellidos.setText("");
        jTextFieldEspecialidad.setText("");
        jTextFieldLicencia.setText("");
        jTextFieldUsername.setText("");
        jPasswordField1.setText("");

        jLabel_Error_Nombre.setText(" ");
        jLabel_Error_Apellido.setText(" ");
        jLabel_Error_Licencia.setText(" ");
        jLabel_Error_Espec.setText(" ");
        jLabel_Error_Username.setText(" ");
        jLabel_Error_Password.setText(" ");

        jLabel_Error_Nombre.setForeground(Color.red);
        jLabel_Error_Apellido.setForeground(Color.red);
        jLabel_Error_Licencia.setForeground(Color.red);
        jLabel_Error_Espec.setForeground(Color.red);
        jLabel_Error_Username.setForeground(Color.red);
        jLabel_Error_Password.setForeground(Color.red);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonCrear = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonVerHorario = new javax.swing.JButton();
        jButtonVerCitas = new javax.swing.JButton();
        jButtonCitasProgramadas = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDoctores = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel_Error_Nombre = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldApellidos = new javax.swing.JTextField();
        jLabel_Error_Apellido = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldLicencia = new javax.swing.JTextField();
        jLabel_Error_Licencia = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldEspecialidad = new javax.swing.JTextField();
        jLabel_Error_Espec = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel_Error_Username = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel_Error_Password = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("MÃ©dicos");
        setToolTipText("");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButtonCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_create.png"))); // NOI18N
        jButtonCrear.setText("Crear");
        jButtonCrear.setFocusable(false);
        jButtonCrear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCrear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonCrear);

        jButtonActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_save.png"))); // NOI18N
        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.setFocusable(false);
        jButtonActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonActualizar);

        jButtonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_delete.png"))); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setFocusable(false);
        jButtonEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEliminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonEliminar);

        jButtonLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_clear.png"))); // NOI18N
        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.setFocusable(false);
        jButtonLimpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonLimpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonLimpiar);

        jButtonVerHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_calendar.png"))); // NOI18N
        jButtonVerHorario.setText("Ver Horario");
        jButtonVerHorario.setFocusable(false);
        jButtonVerHorario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonVerHorario.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonVerHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerHorarioActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonVerHorario);

        jButtonVerCitas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_clipboard.png"))); // NOI18N
        jButtonVerCitas.setText("Citas del Dia");
        jButtonVerCitas.setFocusable(false);
        jButtonVerCitas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonVerCitas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonVerCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerCitasActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonVerCitas);

        jButtonCitasProgramadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/multixsoft/hospitapp/imagenes/ic_people.png"))); // NOI18N
        jButtonCitasProgramadas.setText("Citas Proximas");
        jButtonCitasProgramadas.setFocusable(false);
        jButtonCitasProgramadas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCitasProgramadas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCitasProgramadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCitasProgramadasActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonCitasProgramadas);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setViewportView(jListDoctores);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Doctor"));

        jLabel1.setText("Nombre:");

        jLabel_Error_Nombre.setText(" ");

        jLabel3.setText("Apellido:");

        jTextFieldApellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldApellidosActionPerformed(evt);
            }
        });

        jLabel_Error_Apellido.setText(" ");

        jLabel5.setText("Licencia:");

        jLabel_Error_Licencia.setText(" ");

        jLabel7.setText("Especialidad:");

        jLabel_Error_Espec.setText(" ");

        jLabel9.setText("Username:");

        jLabel_Error_Username.setText(" ");

        jLabel11.setText("Password:");

        jLabel_Error_Password.setText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNombre)
                            .addComponent(jTextFieldApellidos)
                            .addComponent(jTextFieldLicencia)
                            .addComponent(jTextFieldEspecialidad)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Error_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Error_Apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Error_Licencia, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Error_Espec, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 21, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldUsername)
                            .addComponent(jPasswordField1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Error_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Error_Username, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Nombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Apellido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Licencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Espec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Username)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_Error_Password)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldApellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldApellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldApellidosActionPerformed

    private void jButtonCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearActionPerformed
        String username = jTextFieldUsername.getText();
        String password = new String(jPasswordField1.getPassword());
        String firstName = jTextFieldNombre.getText();
        String lastName = jTextFieldApellidos.getText();
        String license = jTextFieldLicencia.getText();
        String specialty = jTextFieldEspecialidad.getText();

        boolean isValid_Nombre = false;
        boolean isValid_Apellido = false;
//        boolean isValid_Licencia = false;
//        boolean isValid_Especialidad = false;
//        boolean isValid_Username = false;
        boolean isValid_password = false;

        if (username != null
                && firstName != null
                && lastName != null
                && license != null
                && specialty != null) {

            if (!username.isEmpty()
                    && !firstName.isEmpty()
                    && !lastName.isEmpty()
                    && !license.isEmpty()
                    && !specialty.isEmpty()
                    && !password.isEmpty()) {

                if (existeUsername(username)) {
                    JPanes.getInstance().errorPane("El Nombre de Usuario no estÃ¡ disponible: " + username);
                    return;
                }

                Validator val = Validator.getInstance();

                isValid_Nombre = val.isValidFirstName(firstName);
                isValid_Apellido = val.isValidLastName(lastName);
//                isValid_Licencia = val.isValidEmail(address);
//                isValid_Especialidad = val.isValidNss(nss);
//                isValid_Username = val.isValidNss(nss);
                isValid_password = val.isValidPassword(password);

                if (isValid_Nombre
                        && isValid_Apellido
                        && isValid_password) {

                    ConectorPrivacyControl pc = ConectorPrivacyControl.getInstance();
                    byte[] encrypted = pc.encrypt(password.getBytes(), pc.getKey());
                    String pass = pc.bytesToString(encrypted);

                    Doctor doctor = new Doctor(username, pass, firstName, lastName, license);
                    doctor.setSpecialty(specialty);

                    ConectorDoctorManager conectorDoctor = ConectorDoctorManager.getInstance();
                    String saveNewDoctor = conectorDoctor.saveNewDoctor(doctor);
                    actualizarListDoctores();

                    if (saveNewDoctor != null) {
                        JPanes.getInstance().msgPane("Se creÃ³ el MÃ©dico con Ã©xito.");

                        //asignarle un schedule vacio al doctor nuevo
                        long id = (long) (Math.random() * 100000);
                        Schedule sch = new Schedule(id);
                        sch.setDoctorUsername(doctor);
                        sch.setMonday(" ");
                        sch.setTuesday(" ");
                        sch.setWednesday(" ");
                        sch.setThursday(" ");
                        sch.setFriday(" ");

                        ConectorDoctorManager dm = ConectorDoctorManager.getInstance();
                        String setSchedule = dm.setSchedule(sch);
                        if (setSchedule != null) {
                            JPanes.getInstance().msgPane("Se le asigno un Horario vacÃ­o al MÃ©dico.");
                        } else {
                            JPanes.getInstance().errorPane("No se le pudo asignar un Horario al MÃ©dico.");
                        }
                        limpiar();
                        actualizarListDoctores();
                    } else {
                        JPanes.getInstance().errorPane("El MÃ©dico no se pudo crear...");

                    }
                } else {
                    if (!isValid_Nombre) {
                        jLabel_Error_Nombre.setText("El nombre debe contener mÃ¡s de 2 caracteres y empezar con una mayÃºscula.");
                    } else {
                        jLabel_Error_Nombre.setText(" ");
                    }

                    if (!isValid_Apellido) {
                        jLabel_Error_Apellido.setText("El apellido debe contener mÃ¡s de 2 caracteres y empezar con una mayÃºscula.");
                    } else {
                        jLabel_Error_Apellido.setText(" ");
                    }

                    if (!isValid_password) {
                        jLabel_Error_Password.setText("La contraseÃ±a debe combinar mayÃºsculas, minÃºsculas y nÃºmeros.");
                        if (password.length() < 8) {
                            jLabel_Error_Password.setText("La contraseÃ±a debe tener mÃ­nimo 8 caracteres.");
                        }
                    } else {
                        jLabel_Error_Password.setText(" ");
                    }
                }

            } else {
                jLabel_Error_Nombre.setText("* Todo Campo debe de tener un dato");
            }
        } else {
            jLabel_Error_Nombre.setText("* Todo Campo debe de tener un dato");
        }
    }//GEN-LAST:event_jButtonCrearActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        String username = jTextFieldUsername.getText();
        String password = new String(jPasswordField1.getPassword());
        String firstName = jTextFieldNombre.getText();
        String lastName = jTextFieldApellidos.getText();
        String license = jTextFieldLicencia.getText();
        String specialty = jTextFieldEspecialidad.getText();

        boolean isValid_Nombre = false;
        boolean isValid_Apellido = false;
//        boolean isValid_Licencia = false;
//        boolean isValid_Especialidad = false;
//        boolean isValid_Username = false;
        boolean isValid_password = false;

        if (username != null
                && firstName != null
                && lastName != null
                && license != null
                && specialty != null) {

            if (!username.isEmpty()
                    && !firstName.isEmpty()
                    && !lastName.isEmpty()
                    && !license.isEmpty()
                    && !specialty.isEmpty()) {

                if (password.isEmpty()) {
                    password = selectedDoctor.getPassword();
                }

//                Validator val = Validator.getInstance();
//
//                isValid_Nombre = val.isValidFirstName(firstName);
//                isValid_Apellido = val.isValidLastName(lastName);
//                isValid_password = val.isValidPassword(password);
//
//                if (isValid_Nombre
//                        && isValid_Apellido
//                        && isValid_password) {
//
//                    Doctor doctor = new Doctor(username, password, firstName, lastName, license);
//                    doctor.setSpecialty(specialty);
//
//                    ConectorDoctorManager conectorDoctor = ConectorDoctorManager.getInstance();
//                    boolean actualizar = conectorDoctor.(doctor);
//                    actualizarListDoctores();
//
//                    if (actualizar) {
//                        msgPane("Se actualizÃ³ el MÃ©dico con Ã©xito.");
//
//                    } else {
//                        errorPane("El MÃ©dico no se pudo actualizar...");
//
//                    }
//                } else {
//                    if (!isValid_Nombre) {
//                        jLabel_Error_Nombre.setText("El nombre debe contener mÃ¡s de 2 caracteres y empezar con una mayÃºscula.");
//                    } else {
//                        jLabel_Error_Nombre.setText(" ");
//                    }
//
//                    if (!isValid_Apellido) {
//                        jLabel_Error_Apellido.setText("El apellido debe contener mÃ¡s de 2 caracteres y empezar con una mayÃºscula.");
//                    } else {
//                        jLabel_Error_Apellido.setText(" ");
//                    }
//
//                    if (!isValid_password) {
//                        jLabel_Error_Password.setText("La contraseÃ±a debe combinar mayÃºsculas, minÃºsculas y nÃºmeros.");
//                        if (password.length() < 8) {
//                            jLabel_Error_Password.setText("La contraseÃ±a debe tener mÃ­nimo 8 caracteres.");
//                        }
//                    } else {
//                        jLabel_Error_Password.setText(" ");
//                    }
//                }
                ConectorPrivacyControl pc = ConectorPrivacyControl.getInstance();
                byte[] encrypted = pc.encrypt(password.getBytes(), pc.getKey());
                String pass = pc.bytesToString(encrypted);

                Doctor doctor = new Doctor(selectedDoctor.getUsername(), pass, firstName, lastName, license);
                doctor.setSpecialty(specialty);

                ConectorServicio conectorServicio = ConectorServicio.getInstance();
                conectorServicio.updateDoctor(doctor);
                //TODO
                actualizarListDoctores();

//                limpiar();
            } else {
                jLabel_Error_Nombre.setText("* Todo Campo debe de tener un dato");
                jLabel_Error_Nombre.setForeground(Color.red);
            }
        } else {
            jLabel_Error_Nombre.setText("* Todo Campo debe de tener un dato");
            jLabel_Error_Nombre.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        ListModel modelo = jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor doc = (Doctor) modelo.getElementAt(indice);

            int n = JOptionPane.showConfirmDialog(
                    null, "Â¿Esta seguro de eliminar a " + doc.toString() + " ?", "ConfirmaciÃ³n",
                    JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION) {
                ConectorDoctorManager dm = ConectorDoctorManager.getInstance();
                boolean deleted = dm.deleteDoctor(doc);
                if (deleted) {
                    JPanes.getInstance().msgPane("El MÃ©dico se elimino con exito.");
                } else {
                    JPanes.getInstance().errorPane("El MÃ©dico no se pudo eliminar");
                }
            } else if (n == JOptionPane.NO_OPTION) {
                //JOptionPane.showMessageDialog(null, "Continueando...");
            } else {
                //JOptionPane.showMessageDialog(null, "Continueando...");
            }

        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void jButtonVerHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerHorarioActionPerformed
        ListModel modelo = jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor doc = (Doctor) modelo.getElementAt(indice);
            Frame_Horarios horarios = new Frame_Horarios(doc);
            horarios.setVisible(true);
        }
    }//GEN-LAST:event_jButtonVerHorarioActionPerformed

    private void jButtonVerCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerCitasActionPerformed
        ListModel modelo = jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor doc = (Doctor) modelo.getElementAt(indice);

            JInternalFrame[] allFrames = desk.getAllFrames();
            for (int i = 0; i < allFrames.length; i++) {
                JInternalFrame frame = allFrames[i];
                String name = frame.getName();
                if (name != null) {
                    if (name.equalsIgnoreCase("verCitas")) {
                        frame.moveToFront();
                        return;
                    }
                }
            }

            JIF_VerCItas verCitas = new JIF_VerCItas(doc, desk);
            verCitas.setName("verCitas");
            verCitas.setVisible(true);
            desk.add(verCitas);
            verCitas.requestFocusInWindow();

            verCitas.moveToFront();
        }

    }//GEN-LAST:event_jButtonVerCitasActionPerformed

    private void jButtonCitasProgramadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCitasProgramadasActionPerformed
        ListModel modelo = jListDoctores.getModel();
        int indice = jListDoctores.getSelectedIndex();
        if (indice != -1) {
            Doctor doc = (Doctor) modelo.getElementAt(indice);

            JInternalFrame[] allFrames = desk.getAllFrames();
            for (int i = 0; i < allFrames.length; i++) {
                JInternalFrame frame = allFrames[i];
                String name = frame.getName();
                if (name != null) {
                    if (name.equalsIgnoreCase("proximasCitas")) {
                        frame.moveToFront();
                        return;
                    }
                }
            }

            JIF_ProximasCitas proximasCitas = new JIF_ProximasCitas(doc);
            proximasCitas.setName("proximasCitas");
            proximasCitas.setVisible(true);
            desk.add(proximasCitas);
            proximasCitas.requestFocusInWindow();

            proximasCitas.moveToFront();
        }
    }//GEN-LAST:event_jButtonCitasProgramadasActionPerformed

    private class ManejadorListaDoctores implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting() == false) {
                int indice = jListDoctores.getSelectedIndex();
                if (indice == -1) {
                    jButtonEliminar.setEnabled(false);
                    jButtonVerHorario.setEnabled(false);
                    jButtonActualizar.setEnabled(false);
                    jButtonVerCitas.setEnabled(false);
                    jButtonCitasProgramadas.setEnabled(false);
                } else {
                    limpiar();
                    jButtonEliminar.setEnabled(true);
                    jButtonVerHorario.setEnabled(true);
                    jButtonActualizar.setEnabled(true);
                    jButtonVerCitas.setEnabled(true);
                    jButtonCitasProgramadas.setEnabled(true);

                    ListModel modelo = jListDoctores.getModel();
                    Doctor cSel = (Doctor) modelo.getElementAt(indice);

                    selectedDoctor = cSel;

                    jTextFieldNombre.setText(cSel.getFirstName());
                    jTextFieldApellidos.setText(cSel.getLastName());
                    jTextFieldEspecialidad.setText(cSel.getSpecialty());
                    jTextFieldLicencia.setText(cSel.getLicense());
                    jTextFieldUsername.setText(cSel.getUsername());
                    jPasswordField1.setText("");
                }
            }
        }
    }

    private boolean existeUsername(String un) {
        ListModel modelo = jListDoctores.getModel();
        for (int i = 0; i < modelo.getSize(); i++) {
            Doctor d = (Doctor) modelo.getElementAt(i);
            if (d.getUsername().equalsIgnoreCase(un)) {
                return true;
            }
        }
        return false;
    }

//    private boolean contieneCharacteresInvalidos(String s) {
//        char c;
//        for (int i = 0; i < s.length(); i++) {
//            c = s.charAt(i);
//            if (c == '?' || c == '\\' || c == '#' || c == '%') {
//                return true;
//            }
//        }
//        return false;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonCitasProgramadas;
    private javax.swing.JButton jButtonCrear;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonVerCitas;
    private javax.swing.JButton jButtonVerHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_Error_Apellido;
    private javax.swing.JLabel jLabel_Error_Espec;
    private javax.swing.JLabel jLabel_Error_Licencia;
    private javax.swing.JLabel jLabel_Error_Nombre;
    private javax.swing.JLabel jLabel_Error_Password;
    private javax.swing.JLabel jLabel_Error_Username;
    private javax.swing.JList jListDoctores;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldApellidos;
    private javax.swing.JTextField jTextFieldEspecialidad;
    private javax.swing.JTextField jTextFieldLicencia;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
